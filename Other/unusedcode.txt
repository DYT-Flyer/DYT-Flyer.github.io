func listFiles(dir string) ([]string, error) {
	files, err := os.ReadDir(dir)
	if err != nil {
		return nil, err
	}

	var fileNames []string
	for _, file := range files {
		if !file.IsDir() {
			fileNames = append(fileNames, file.Name())
		}
	}
	return fileNames, nil
}

// Make the files
func makeFiles() ([]string, []string) {
	simple, err := listFiles("/Users/sherk/cps596/Dataset-Images/Simple")
	if err != nil {
		fmt.Println("Error reading first directory:", err)
		return nil, nil
	}

	complex, err := listFiles("/Users/sherk/cps596/Dataset-Images/Complex")
	if err != nil {
		fmt.Println("Error reading second directory:", err)
		return nil, nil
	}

	return simple, complex
}

// Get the file names in a directory
func getFileNames(directory string, targetFirstNumber int) []string {
	log.Default().Println("Getting file names")
	files, err := os.ReadDir(directory)
	if err != nil {
		log.Fatal(err)
	}
	log.Default().Println("Files read")

	var filteredFiles []string

	// Filter files based on the first number
	for _, file := range files {
		nameParts := strings.Split(file.Name(), "-")
		if len(nameParts) < 2 {
			continue
		}

		firstNumber, err := strconv.Atoi(nameParts[0])
		if err != nil {
			continue
		}

		if firstNumber == targetFirstNumber {
			filteredFiles = append(filteredFiles, file.Name())
		}
	}

	return filteredFiles
}

// Get rid of this
err = appendToFile(filename, username)
if err != nil {
	log.Fatalf("Failed to write to file: %v", err)
	return false
}